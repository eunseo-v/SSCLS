2023-02-22 11:21:07,507 - pyskl - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA GeForce RTX 3090
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0
PyTorch: 1.10.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2
OpenCV: 4.7.0
MMCV: 1.6.2
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
pyskl: 0.1.0+HEAD
------------------------------------------------------------

2023-02-22 11:21:08,882 - pyskl - INFO - Config: model = dict(
    type='Recognizer3D',
    backbone=dict(
        type='ResNet3dSlowOnly',
        in_channels=5,
        base_channels=32,
        num_stages=3,
        out_indices=(2, ),
        stage_blocks=(4, 6, 3),
        conv1_stride=(1, 1),
        pool1_stride=(1, 1),
        inflate=(0, 1, 1),
        spatial_strides=(2, 2, 2),
        temporal_strides=(1, 1, 2)),
    cls_head=dict(
        type='I3DHead', in_channels=512, num_classes=10, dropout=0.5),
    test_cfg=dict(average_clips='prob'))
dataset_type = 'PoseDataset'
ann_file = 'data/ds_taichi/test9nsnr.pkl'
left_kp = [
    5, 6, 7, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71
]
right_kp = [
    1, 2, 3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43
]
train_pipeline = [
    dict(type='UniformSampleFrames', clip_len=48),
    dict(type='PoseDecode'),
    dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
    dict(type='Resize', scale=(-1, 64)),
    dict(type='RandomResizedCrop', area_range=(0.56, 1.0)),
    dict(type='Resize', scale=(56, 56), keep_ratio=False),
    dict(
        type='Flip',
        flip_ratio=0.5,
        left_kp=[
            5, 6, 7, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
            58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71
        ],
        right_kp=[
            1, 2, 3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43
        ]),
    dict(type='GenerateTaiChiPoseTarget', with_kp=True, with_limb=False),
    dict(type='FormatShape', input_format='NCTHW_Heatmap'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs', 'label'])
]
val_pipeline = [
    dict(type='UniformSampleFrames', clip_len=48, num_clips=1),
    dict(type='PoseDecode'),
    dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
    dict(type='Resize', scale=(64, 64), keep_ratio=False),
    dict(type='GenerateTaiChiPoseTarget', with_kp=True, with_limb=False),
    dict(type='FormatShape', input_format='NCTHW_Heatmap'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs'])
]
test_pipeline = [
    dict(type='UniformSampleFrames', clip_len=48, num_clips=10),
    dict(type='PoseDecode'),
    dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
    dict(type='Resize', scale=(64, 64), keep_ratio=False),
    dict(
        type='GenerateTaiChiPoseTarget',
        with_kp=True,
        with_limb=False,
        double=True),
    dict(type='FormatShape', input_format='NCTHW_Heatmap'),
    dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
    dict(type='ToTensor', keys=['imgs'])
]
data = dict(
    videos_per_gpu=8,
    workers_per_gpu=4,
    test_dataloader=dict(videos_per_gpu=6),
    train=dict(
        type='RepeatDataset',
        times=30,
        dataset=dict(
            type='PoseDataset',
            ann_file='data/ds_taichi/test9nsnr.pkl',
            split='train',
            pipeline=[
                dict(type='UniformSampleFrames', clip_len=48),
                dict(type='PoseDecode'),
                dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
                dict(type='Resize', scale=(-1, 64)),
                dict(type='RandomResizedCrop', area_range=(0.56, 1.0)),
                dict(type='Resize', scale=(56, 56), keep_ratio=False),
                dict(
                    type='Flip',
                    flip_ratio=0.5,
                    left_kp=[
                        5, 6, 7, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                        69, 70, 71
                    ],
                    right_kp=[
                        1, 2, 3, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                        41, 42, 43
                    ]),
                dict(
                    type='GenerateTaiChiPoseTarget',
                    with_kp=True,
                    with_limb=False),
                dict(type='FormatShape', input_format='NCTHW_Heatmap'),
                dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
                dict(type='ToTensor', keys=['imgs', 'label'])
            ])),
    val=dict(
        type='PoseDataset',
        ann_file='data/ds_taichi/test9nsnr.pkl',
        split='test',
        pipeline=[
            dict(type='UniformSampleFrames', clip_len=48, num_clips=1),
            dict(type='PoseDecode'),
            dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
            dict(type='Resize', scale=(64, 64), keep_ratio=False),
            dict(
                type='GenerateTaiChiPoseTarget', with_kp=True,
                with_limb=False),
            dict(type='FormatShape', input_format='NCTHW_Heatmap'),
            dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
            dict(type='ToTensor', keys=['imgs'])
        ]),
    test=dict(
        type='PoseDataset',
        ann_file='data/ds_taichi/test9nsnr.pkl',
        split='test',
        pipeline=[
            dict(type='UniformSampleFrames', clip_len=48, num_clips=10),
            dict(type='PoseDecode'),
            dict(type='PoseCompact', hw_ratio=1.0, allow_imgpad=True),
            dict(type='Resize', scale=(64, 64), keep_ratio=False),
            dict(
                type='GenerateTaiChiPoseTarget',
                with_kp=True,
                with_limb=False,
                double=True),
            dict(type='FormatShape', input_format='NCTHW_Heatmap'),
            dict(type='Collect', keys=['imgs', 'label'], meta_keys=[]),
            dict(type='ToTensor', keys=['imgs'])
        ]))
optimizer = dict(type='SGD', lr=1, momentum=0.9, weight_decay=0.0003)
optimizer_config = dict(grad_clip=dict(max_norm=40, norm_type=2))
lr_config = dict(policy='CosineAnnealing', by_epoch=False, min_lr=0)
total_epochs = 24
checkpoint_config = dict(interval=24)
evaluation = dict(
    interval=1, metrics=['top_k_accuracy', 'mean_class_accuracy'], topk=(1, 5))
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
log_level = 'INFO'
output_config = dict(
    out='./model_pth/exp5/t9nsnr_5p_ft_lr1/test_result/results.pkl')
eval_config = dict(
    metric_out='./model_pth/exp5/t9nsnr_5p_ft_lr1/test_result',
    eval=[
        'top_k_accuracy', 'mean_class_accuracy', 'confusion_matrix',
        't_sne_vis'
    ])
work_dir = './model_pth/exp5/t9nsnr_5p_ft_lr1'
load_from = './model_pth/ntu120xsub_5parts_kp/best_top1_acc_epoch_23.pth'
find_unused_parameters = True
dist_params = dict(backend='nccl')
gpu_ids = range(0, 4)

2023-02-22 11:21:08,882 - pyskl - INFO - Set random seed to 42, deterministic: True
2023-02-22 11:21:09,547 - pyskl - INFO - 20 videos remain after valid thresholding
2023-02-22 11:21:16,703 - pyskl - INFO - 180 videos remain after valid thresholding
2023-02-22 11:21:16,705 - pyskl - INFO - load checkpoint from local path: ./model_pth/ntu120xsub_5parts_kp/best_top1_acc_epoch_23.pth
2023-02-22 11:21:16,795 - pyskl - WARNING - The model and loaded state dict do not match exactly

size mismatch for cls_head.fc_cls.weight: copying a param with shape torch.Size([120, 512]) from checkpoint, the shape in current model is torch.Size([10, 512]).
size mismatch for cls_head.fc_cls.bias: copying a param with shape torch.Size([120]) from checkpoint, the shape in current model is torch.Size([10]).
2023-02-22 11:21:16,796 - pyskl - INFO - Start running, host: yl@83090-jin, work_dir: /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1
2023-02-22 11:21:16,796 - pyskl - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-22 11:21:16,797 - pyskl - INFO - workflow: [('train', 1)], max: 24 epochs
2023-02-22 11:21:16,797 - pyskl - INFO - Checkpoints will be saved to /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1 by HardDiskBackend.
2023-02-22 11:21:57,811 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:21:57,812 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:21:57,812 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:21:57,812 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:21:57,857 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_1.pth.
2023-02-22 11:21:57,857 - pyskl - INFO - Best top1_acc is 0.1000 at 1 epoch.
2023-02-22 11:21:57,857 - pyskl - INFO - Epoch(val) [1][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:22:37,284 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:22:37,284 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:22:37,284 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:22:37,285 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:22:37,285 - pyskl - INFO - Epoch(val) [2][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:23:16,952 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:23:16,953 - pyskl - INFO - 
top1_acc	0.0944
top5_acc	0.5278
2023-02-22 11:23:16,953 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:23:16,953 - pyskl - INFO - 
mean_acc	0.0944
2023-02-22 11:23:16,953 - pyskl - INFO - Epoch(val) [3][6]	top1_acc: 0.0944, top5_acc: 0.5278, mean_class_accuracy: 0.0944
2023-02-22 11:23:57,173 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:23:57,173 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:23:57,173 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:23:57,174 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:23:57,174 - pyskl - INFO - Epoch(val) [4][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:24:37,626 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:24:37,627 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:24:37,627 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:24:37,628 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:24:37,628 - pyskl - INFO - Epoch(val) [5][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:25:17,219 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:25:17,220 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:25:17,220 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:25:17,220 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:25:17,220 - pyskl - INFO - Epoch(val) [6][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:25:56,833 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:25:56,834 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:25:56,834 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:25:56,834 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:25:56,834 - pyskl - INFO - Epoch(val) [7][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:26:36,610 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:26:36,611 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:26:36,611 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:26:36,611 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:26:36,611 - pyskl - INFO - Epoch(val) [8][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:27:15,616 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:27:15,617 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:27:15,617 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:27:15,617 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:27:15,618 - pyskl - INFO - Epoch(val) [9][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:27:54,155 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:27:54,156 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:27:54,156 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:27:54,156 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:27:54,156 - pyskl - INFO - Epoch(val) [10][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:28:32,261 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:28:32,261 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:28:32,261 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:28:32,262 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:28:32,262 - pyskl - INFO - Epoch(val) [11][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:29:10,512 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:29:10,512 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:29:10,512 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:29:10,513 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:29:10,513 - pyskl - INFO - Epoch(val) [12][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:29:50,491 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:29:50,492 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:29:50,492 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:29:50,493 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:29:50,493 - pyskl - INFO - Epoch(val) [13][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:30:30,863 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:30:30,864 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:30:30,864 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:30:30,865 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:30:30,865 - pyskl - INFO - Epoch(val) [14][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:31:10,290 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:31:10,291 - pyskl - INFO - 
top1_acc	0.1000
top5_acc	0.5000
2023-02-22 11:31:10,291 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:31:10,292 - pyskl - INFO - 
mean_acc	0.1000
2023-02-22 11:31:10,292 - pyskl - INFO - Epoch(val) [15][6]	top1_acc: 0.1000, top5_acc: 0.5000, mean_class_accuracy: 0.1000
2023-02-22 11:31:50,178 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:31:50,178 - pyskl - INFO - 
top1_acc	0.1889
top5_acc	0.5000
2023-02-22 11:31:50,179 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:31:50,179 - pyskl - INFO - 
mean_acc	0.1889
2023-02-22 11:31:50,182 - pyskl - INFO - The previous best checkpoint /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1/best_top1_acc_epoch_1.pth was removed
2023-02-22 11:31:50,226 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_16.pth.
2023-02-22 11:31:50,226 - pyskl - INFO - Best top1_acc is 0.1889 at 16 epoch.
2023-02-22 11:31:50,226 - pyskl - INFO - Epoch(val) [16][6]	top1_acc: 0.1889, top5_acc: 0.5000, mean_class_accuracy: 0.1889
2023-02-22 11:32:30,240 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:32:30,242 - pyskl - INFO - 
top1_acc	0.1278
top5_acc	0.6944
2023-02-22 11:32:30,242 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:32:30,243 - pyskl - INFO - 
mean_acc	0.1278
2023-02-22 11:32:30,243 - pyskl - INFO - Epoch(val) [17][6]	top1_acc: 0.1278, top5_acc: 0.6944, mean_class_accuracy: 0.1278
2023-02-22 11:33:10,901 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:33:10,902 - pyskl - INFO - 
top1_acc	0.1111
top5_acc	0.5944
2023-02-22 11:33:10,902 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:33:10,902 - pyskl - INFO - 
mean_acc	0.1111
2023-02-22 11:33:10,903 - pyskl - INFO - Epoch(val) [18][6]	top1_acc: 0.1111, top5_acc: 0.5944, mean_class_accuracy: 0.1111
2023-02-22 11:33:50,780 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:33:50,780 - pyskl - INFO - 
top1_acc	0.1222
top5_acc	0.6389
2023-02-22 11:33:50,780 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:33:50,781 - pyskl - INFO - 
mean_acc	0.1222
2023-02-22 11:33:50,781 - pyskl - INFO - Epoch(val) [19][6]	top1_acc: 0.1222, top5_acc: 0.6389, mean_class_accuracy: 0.1222
2023-02-22 11:34:30,824 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:34:30,824 - pyskl - INFO - 
top1_acc	0.2889
top5_acc	0.8556
2023-02-22 11:34:30,824 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:34:30,825 - pyskl - INFO - 
mean_acc	0.2889
2023-02-22 11:34:30,827 - pyskl - INFO - The previous best checkpoint /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1/best_top1_acc_epoch_16.pth was removed
2023-02-22 11:34:30,871 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_20.pth.
2023-02-22 11:34:30,871 - pyskl - INFO - Best top1_acc is 0.2889 at 20 epoch.
2023-02-22 11:34:30,871 - pyskl - INFO - Epoch(val) [20][6]	top1_acc: 0.2889, top5_acc: 0.8556, mean_class_accuracy: 0.2889
2023-02-22 11:35:11,628 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:35:11,629 - pyskl - INFO - 
top1_acc	0.4056
top5_acc	0.8722
2023-02-22 11:35:11,629 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:35:11,629 - pyskl - INFO - 
mean_acc	0.4056
2023-02-22 11:35:11,632 - pyskl - INFO - The previous best checkpoint /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1/best_top1_acc_epoch_20.pth was removed
2023-02-22 11:35:11,674 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_21.pth.
2023-02-22 11:35:11,674 - pyskl - INFO - Best top1_acc is 0.4056 at 21 epoch.
2023-02-22 11:35:11,675 - pyskl - INFO - Epoch(val) [21][6]	top1_acc: 0.4056, top5_acc: 0.8722, mean_class_accuracy: 0.4056
2023-02-22 11:35:51,677 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:35:51,678 - pyskl - INFO - 
top1_acc	0.4778
top5_acc	0.8667
2023-02-22 11:35:51,678 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:35:51,678 - pyskl - INFO - 
mean_acc	0.4778
2023-02-22 11:35:51,680 - pyskl - INFO - The previous best checkpoint /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1/best_top1_acc_epoch_21.pth was removed
2023-02-22 11:35:51,720 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_22.pth.
2023-02-22 11:35:51,721 - pyskl - INFO - Best top1_acc is 0.4778 at 22 epoch.
2023-02-22 11:35:51,721 - pyskl - INFO - Epoch(val) [22][6]	top1_acc: 0.4778, top5_acc: 0.8667, mean_class_accuracy: 0.4778
2023-02-22 11:36:32,175 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:36:32,176 - pyskl - INFO - 
top1_acc	0.5056
top5_acc	0.8778
2023-02-22 11:36:32,176 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:36:32,176 - pyskl - INFO - 
mean_acc	0.5056
2023-02-22 11:36:32,178 - pyskl - INFO - The previous best checkpoint /home/yl/sscls/model_pth/exp5/t9nsnr_5p_ft_lr1/best_top1_acc_epoch_22.pth was removed
2023-02-22 11:36:32,219 - pyskl - INFO - Now best checkpoint is saved as best_top1_acc_epoch_23.pth.
2023-02-22 11:36:32,219 - pyskl - INFO - Best top1_acc is 0.5056 at 23 epoch.
2023-02-22 11:36:32,219 - pyskl - INFO - Epoch(val) [23][6]	top1_acc: 0.5056, top5_acc: 0.8778, mean_class_accuracy: 0.5056
2023-02-22 11:36:52,956 - pyskl - INFO - Saving checkpoint at 24 epochs
2023-02-22 11:37:11,816 - pyskl - INFO - Evaluating top_k_accuracy ...
2023-02-22 11:37:11,817 - pyskl - INFO - 
top1_acc	0.4889
top5_acc	0.8722
2023-02-22 11:37:11,817 - pyskl - INFO - Evaluating mean_class_accuracy ...
2023-02-22 11:37:11,817 - pyskl - INFO - 
mean_acc	0.4889
2023-02-22 11:37:11,817 - pyskl - INFO - Epoch(val) [24][6]	top1_acc: 0.4889, top5_acc: 0.8722, mean_class_accuracy: 0.4889
